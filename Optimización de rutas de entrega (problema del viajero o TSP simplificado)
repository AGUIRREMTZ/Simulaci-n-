import random
import math
import matplotlib.pyplot as plt

# --- Generar ciudades aleatorias ---
NUM_CIUDADES = 10
ciudades = [(random.uniform(0, 100), random.uniform(0, 100)) for _ in range(NUM_CIUDADES)]

def distancia(c1, c2):
    return math.sqrt((c1[0] - c2[0])**2 + (c1[1] - c2[1])**2)

# --- Calcular la distancia total de una ruta ---
def longitud_ruta(ruta):
    return sum(distancia(ciudades[ruta[i]], ciudades[ruta[(i + 1) % NUM_CIUDADES]]) for i in range(NUM_CIUDADES))

# --- Crear una ruta aleatoria ---
def crear_ruta():
    ruta = list(range(NUM_CIUDADES))
    random.shuffle(ruta)
    return ruta

# --- Cruzamiento (recombinación de rutas) ---
def cruzar(r1, r2):
    i, j = sorted(random.sample(range(NUM_CIUDADES), 2))
    hijo = [None] * NUM_CIUDADES
    hijo[i:j] = r1[i:j]
    pos = j
    for ciudad in r2:
        if ciudad not in hijo:
            if pos >= NUM_CIUDADES:
                pos = 0
            hijo[pos] = ciudad
            pos += 1
    return hijo

# --- Mutación ---
def mutar(ruta):
    i, j = random.sample(range(NUM_CIUDADES), 2)
    ruta[i], ruta[j] = ruta[j], ruta[i]
    return ruta

# --- Algoritmo Genético ---
POBLACION = 50
GENERACIONES = 300
MUTACION = 0.2

poblacion = [crear_ruta() for _ in range(POBLACION)]

for gen in range(GENERACIONES):
    poblacion.sort(key=longitud_ruta)
    nueva_poblacion = poblacion[:10]  # élite
    while len(nueva_poblacion) < POBLACION:
        padre1, padre2 = random.sample(poblacion[:20], 2)
        hijo = cruzar(padre1, padre2)
        if random.random() < MUTACION:
            hijo = mutar(hijo)
        nueva_poblacion.append(hijo)
    poblacion = nueva_poblacion

mejor_ruta = min(poblacion, key=longitud_ruta)
distancia_minima = longitud_ruta(mejor_ruta)

# --- Resultados ---
print("\n--- RESULTADOS ---")
print(f"Mejor ruta encontrada: {mejor_ruta}")
print(f"Distancia total: {distancia_minima:.2f}")

# --- Visualización ---
x = [ciudades[i][0] for i in mejor_ruta] + [ciudades[mejor_ruta[0]][0]]
y = [ciudades[i][1] for i in mejor_ruta] + [ciudades[mejor_ruta[0]][1]]

plt.plot(x, y, marker='o', color='blue')
for i, (cx, cy) in enumerate(ciudades):
    plt.text(cx + 1, cy + 1, str(i), fontsize=9)
plt.title("Ruta óptima de entrega (Algoritmo Genético)")
plt.xlabel("X")
plt.ylabel("Y")
plt.grid(True)
plt.show()
